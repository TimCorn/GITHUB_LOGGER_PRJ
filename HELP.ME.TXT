
   Библиотека логирования
   -----------------------
   
   
Разработана в Debian 10.
   
Библиотека логирования находится в файлах Logger.h Logger.cpp.
Конфигурационный файл - Logger.cfg.
После компиляции создается динамическая библиотека libLogger.so .
В случае если основная программа не может найти ее в каталоге запуска,
следует перенести библиотеку в каталог /lib.

Чтобы собрать:

cd build
make clean
cmake ..
make

После сборки в каталоге build  будут файлы libLogger.so, main_test, 
test_all.sh и конфигурационые файлы. Запускать все  указанные утилиты
можно из каталога buld. Соответственно, если вносились изменения в конфигурационные
файлы, то после пересборки эти изменения будут уничтожены, потому что базовые настройки
конфигураций хранятся в каталоге src и во время сборки они автоматически копируются в
каталог build. Об этом следует помнить.


Тестовая консольная утилита main_test - для проверки библиотеки логирования.

Скрипт test_all.sh - скрипт для автоматической проверки библиотеки логирования.

Чтобы использовать библиотеку нужно скомпилиировать ее с проектом и затем
запустить  конструктор и функцию инициализации:

   threadsafe_queue<string> LogQueue(logPath); 
   LogQueue.RunLogging();

   где cfgPath - полный или относительный путь к конфигурационному файлу.
   В результате создается рабочий поток для вывода пользовательских сообщений в
   набор лог-файлов.
   Тип шаблона <string> - тип пользовательских сообщений.
   
   Объект  threadsafe_queue<string> LogQueue уничтожается при выходе из области видимости.
   
   FCFSTR(ptrTHRQ, pUserObj, Lev,third_str)  -  функция вывода пользовательских сообщений.
   параметры:
          ptrTHRQ - указатель на экземпляр threadsafe_queue<string> - экземпляра класса логирования.
          pUserObj -  указательн на экзепмпляр какого-либо пользовательского класса, откуда делается
                      запись в лог.  
                      В тестовой консольной утилите для экземпляров тренировочных классов он равен this.
                      Для вызова из функции не принадлежащей никакому классу, например из main() он
                      должен быть равен nullptr.
   
   
     
   Параметры конфигурационного файла Logger.cfg.
   ---------------------------------------------
   
# Барьерный уровень. Может принимать значения DEBUG, INFO, WARN, ERROR. 
BARRIER   DEBUG


# Путь к директории  хранения лог. файлов. Полный или относительный.
LOG_DIRECTORY  ../LOD_DIR/JOURNAL/xx

#Единицы измерения размера лог. файлов. 
# Может принимать значения: BYTES - в байтах, KBYTES - в килобайтах.
# MBYTES - в мегабайтах..
UNIT_OF_MEASURE    BYTES 

# Максимальный размер одного лог. файла. См. параметр "UNIT_OF_MEASURE"
REG_SIZE    700


#Максимальное количество лог. файлов.
NUM_REGS  25  


#Выводить на экран сообщения или нет. YES - да выводить, NO - нет не выводить. 
STDOUT      NO


#Фильтр по паттерну. Паттерн вообще говоря должен соответствовать правилам regex.
PATTERN  


#Предел "затоваривания очереди". Это максимальное количество элементов в очереди.
OVERSTOCKING         1000

   
  Консольная утилита main_test
  ----------------------------
  
Запускает ряд потоков, каждый из которых периодически  формирует сообщения.
Период задан одинаковым для всех потоков.
В каждом потоке созданются объекты разных классов для проверки логирования с инфомацией file/class/funcion.
Классов всего четыре. Они распределяются по потокам по очереди (1-2-3-4-1-2-3-4 и т.д.).
Каждый поток фомирует сообщения одного типа из ряда DEBUG, INFO, WARN, ERROR. Эти типы сообщений
также распределяются по потокам по очереди (1-2-3-4-1-2-3-4 и т.д.).
  
  
Утилита main_test принимает параметры:

  1)  Путь к конфигурационному файлу, абсолютный или относительный (опция -p).
  2)  Количество циклов записи (NUM_TEST_CYCLES) или "undef" если требуется неограниченное количество циклов (опция -c).
  3)  Период формирования сообщений, msec (опция -d).
  4)  Количество потоков запущенных параллельно (опция -t).
  
Примеры запуска:
                     ./main_test
                     ./main_test -p ./Logger.cfg  -c 10
                     ./main_test -p ./Logger.cfg  -c 10  -d 7
                     ./main_test -p ./Logger.cfg  -c undef  -d 2
                     ./main_test -p ./Logger.cfg  -c undef  -d 1  -t 10
  
Если задать неограниченное количество циклов, то завершить программу можно с помощью CTRL-C.
В случае отсутствия явно заданных опций, берутся значения по умолчанию. В частности, лог. файлы
складываются в текущий каталог запуска main_test.


Таким образом  потоки формируемые утилитой main_test должны выводить вполне предсказумые результаты, которые
можно проанализиировать. Скрипт test_all.sh автоматически задает и проверяет основные режимы работы библиотеки
логирования.


     Скрипт test_all.sh
     -------------------

Автоматически задает и проверяет основные режимы работы библиотеки логирования.
Файлы 
        Logger_common.cfg
        Logger_barrier.cfg
        Logger_pattern.cfg
        Logger_Reconf.cfg
        
 используются скриптом  test_all.sh для задания отладочных режимов.   

Каталог с лог. файлами создается в директории "../LOD_DIR/JOURNAL/xx".
Период выдачи сообщений в каждом из тренировочных потоков = 10 мсек.
Всего отрабатывают 4 потоков.
Кроме сообщений, проверяется корректность записи в лог. файлы, фильтрация сообщений по барьеру, поиск по паттерну,
изменение настроек без перезапуска основной программы.
В конце работы выдает результат - OK или ERR.


       /*************************************************/


   
   
   
   
   
   
   
   
   
   
   
   
   
